// Copyright 2018 Toyota Research Institute.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <cstring>
#include <random>
#include <string>
#include <vector>

#include <Eigen/Core>
#include <Eigen/Geometry>
#include <unsupported/Eigen/MatrixFunctions>

#include <cost_function/cost_function.h>
#include <trajectory/state.h>
#include <trajectory/trajectory.h>
#include <utils/conversion_utils.h>
#include <utils/linalg_utils.h>
#include <utils/stats_utils.h>
#include <utils/vector_utils.h>

namespace fluid_planner {

// Struct `Gmm` represents parameters to a Gaussian Mixture Model.
struct Gmm {
  int k = 0;                             // Number of components.
  std::vector<float> weights;            // Weights of the components.
  std::vector<Eigen::VectorXf> mean;     // Mean of the components.
  std::vector<Eigen::MatrixXf> cov;      // Cov of the components.
  std::vector<Eigen::MatrixXf> cov_sqrt; // Sqrt of the Cov of the components.
};

// Struct `PlannerProperties` contains all the parameters to the FLUID planner.
struct PlannerProperties {
  float sample_dev = 0; // Sample deviation for generating random trajectories.
  int num_iter = 0;     // Number of iterations that the planner will execute
                        // before termination.
  float rho = 0;        // Percent quantile to truncate the cost for the next
                        // iteration.
  int k = 0;            // Number of components in the GMM -- used in
                        // initializing the GMM.
  int num_traj = 0;     // Number of trajectories to sample at each iteration.
};

// Struct `TrajProperties` contains the parameters on the trajectories that can
// be generated by the planner.
struct TrajProperties {
  float v_ub = 0;     // Upper bound of the linear velocity.
  float v_lb = 0;     // Lower bound of the linear velocity.
  float omega_ub = 0; // Upper bound of the angular velocity.
  float omega_lb = 0; // Lower bound of the angular velocity.
  int num_action_space_discretizations = 0; // Number of discretizations for
                                            // each dimension of the input.
  int num_seg = 0;           // Number of segments per trajectory.
  float traj_duration = 0.0; // Duration of the entire trajectory.
};

// Class `FluidPlanner` plans trajectories given a starting point and a cost
// function.
// TODO(xuning@cmu.edu): Add obstacle avoidance functionalities.
class FluidPlanner {
public:
  FluidPlanner();
  ~FluidPlanner();

  // Initializes the planner with parameter settings and trajectory settings.
  void Initialize(const PlannerProperties &pp, const TrajProperties &tp);

  // Call the planner with the specified starting point `start`, according to
  // the cost function `cf`.
  std::vector<trajectory::Trajectory<float>>
  Plan(const trajectory::State<float> &start, cost_function::CostFunction &cf);

private:
  // The evenly discretized vectors that represents the range of trajectory
  // parameters.
  std::vector<float> omega_vector_; // Angular velocities.
  std::vector<float> vel_vector_;   // Linear velocities.

  // Parameters.
  PlannerProperties pp_;        // Planner properties.
  TrajProperties tp_;           // Trajectory properties.
  float seg_duration_;          // Duration of the segment.
  Eigen::MatrixXf pertubation_; // Pertubation to be added to the covariance
                                // matrix to prevent degeneracy.

  // GMM of the trajectory distributions.
  Gmm gmm_;

  // Set of elite trajectories.
  std::vector<trajectory::Trajectory<float>> traj_;

  // Initialization functions.
  void SetInputRange(float v_lb, float v_ub, float omega_lb, float omega_ub,
                     int N);

  void SetPlannerProperties(const PlannerProperties &pp);

  void SetTrajectoryProperties(const TrajProperties &tp);

  // Trajectory Sampling Methods.

  // Sample uniformly random trajectories within the specified range of
  // trajectory parameters.
  std::vector<trajectory::Trajectory<float>>
  SampleTrajectoriesRandom(const int num_traj);

  // Sample `num_traj` number of trajectories from the GMM.
  std::vector<trajectory::Trajectory<float>>
  SampleTrajectoriesGMM(const Gmm &gmm, const int num_traj);

  // Sample some trajectories from the GMM and some randomly.
  std::vector<trajectory::Trajectory<float>>
  SampleTrajectoriesGMMRandom(const Gmm &gmm, const int num_traj_random,
                              const int num_traj_gmm);

  // Update the GMM according to the trajectories `traj`.
  Gmm UpdateGmm(const std::vector<trajectory::Trajectory<float>> &traj,
                const Gmm &gmm);
};

} // namespace fluid_planner
